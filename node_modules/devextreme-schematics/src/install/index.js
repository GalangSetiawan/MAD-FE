"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const styles_1 = require("../utility/styles");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const latest_versions_1 = require("../utility/latest-versions");
const modify_json_file_1 = require("../utility/modify-json-file");
function default_1(options) {
    return schematics_1.chain([
        (host) => addDevExtremeDependency(host, { dxversion: options.dxversion }),
        (host) => addDevExtremeCSS(host, { project: options.project }),
        (host) => reqisterJSZip(host),
        (_, context) => {
            context.addTask(new tasks_1.NodePackageInstallTask());
        }
    ]);
}
exports.default = default_1;
function addDevExtremeDependency(host, options) {
    dependencies_1.addPackageJsonDependency(host, {
        type: dependencies_1.NodeDependencyType.Default,
        name: 'devextreme',
        version: options.dxversion || latest_versions_1.latestVersions['devextreme']
    });
    dependencies_1.addPackageJsonDependency(host, {
        type: dependencies_1.NodeDependencyType.Default,
        name: 'devextreme-angular',
        version: options.dxversion || latest_versions_1.latestVersions['devextreme-angular']
    });
    dependencies_1.addPackageJsonDependency(host, {
        type: dependencies_1.NodeDependencyType.Dev,
        name: 'devextreme-cli',
        version: latest_versions_1.latestVersions['devextreme-cli']
    });
    dependencies_1.addPackageJsonDependency(host, {
        type: dependencies_1.NodeDependencyType.Dev,
        name: 'devextreme-themebuilder',
        version: options.dxversion || latest_versions_1.latestVersions['devextreme']
    });
    return host;
}
function addDevExtremeCSS(host, options) {
    modify_json_file_1.modifyJSONFile(host, './angular.json', config => {
        return styles_1.addStylesToApp(host, options.project, config);
    });
    return host;
}
function reqisterJSZip(host) {
    modify_json_file_1.modifyJSONFile(host, './tsconfig.app.json', config => {
        const compilerOptions = config['compilerOptions'];
        let paths = compilerOptions['paths'];
        if (!paths) {
            paths = {};
        }
        if (!paths['jszip']) {
            paths['jszip'] = ['node_modules/jszip/dist/jszip.min.js'];
        }
        compilerOptions['paths'] = paths;
        return config;
    });
    return host;
}
//# sourceMappingURL=index.js.map