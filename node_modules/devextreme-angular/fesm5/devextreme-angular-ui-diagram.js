import { __extends, __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';
import DxDiagram from 'devextreme/ui/diagram';
import { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxiCustomShapeComponent, DxoContextMenuModule, DxiCommandModule, DxiItemModule, DxoContextToolboxModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoDefaultItemPropertiesModule, DxoEdgesModule, DxoExportModule, DxoGridSizeModule, DxoHistoryToolbarModule, DxoMainToolbarModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxoPropertiesPanelModule, DxiTabModule, DxiGroupModule, DxoToolboxModule, DxoViewToolbarModule, DxoZoomLevelModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/**
 * The Diagram widget provides a visual interface to help you design new and modify existing diagrams.
 */
var DxDiagramComponent = /** @class */ (function (_super) {
    __extends(DxDiagramComponent, _super);
    function DxDiagramComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
        _this._watcherHelper = _watcherHelper;
        _this._idh = _idh;
        _this._createEventEmitters([
            { subscribe: 'contentReady', emit: 'onContentReady' },
            { subscribe: 'customCommand', emit: 'onCustomCommand' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'itemClick', emit: 'onItemClick' },
            { subscribe: 'itemDblClick', emit: 'onItemDblClick' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
            { emit: 'autoZoomModeChange' },
            { emit: 'contextMenuChange' },
            { emit: 'contextToolboxChange' },
            { emit: 'customShapesChange' },
            { emit: 'customShapeTemplateChange' },
            { emit: 'defaultItemPropertiesChange' },
            { emit: 'disabledChange' },
            { emit: 'edgesChange' },
            { emit: 'elementAttrChange' },
            { emit: 'exportChange' },
            { emit: 'fullScreenChange' },
            { emit: 'gridSizeChange' },
            { emit: 'hasChangesChange' },
            { emit: 'heightChange' },
            { emit: 'historyToolbarChange' },
            { emit: 'mainToolbarChange' },
            { emit: 'nodesChange' },
            { emit: 'pageColorChange' },
            { emit: 'pageOrientationChange' },
            { emit: 'pageSizeChange' },
            { emit: 'propertiesPanelChange' },
            { emit: 'readOnlyChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'showGridChange' },
            { emit: 'simpleViewChange' },
            { emit: 'snapToGridChange' },
            { emit: 'toolboxChange' },
            { emit: 'unitsChange' },
            { emit: 'viewToolbarChange' },
            { emit: 'viewUnitsChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' },
            { emit: 'zoomLevelChange' }
        ]);
        _this._idh.setHost(_this);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxDiagramComponent.prototype, "autoZoomMode", {
        /**
         * Specifies how the Diagram widget automatically zooms the work area.
         */
        get: function () {
            return this._getOption('autoZoomMode');
        },
        set: function (value) {
            this._setOption('autoZoomMode', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "contextMenu", {
        /**
         * Configures the context menu's settings.
         */
        get: function () {
            return this._getOption('contextMenu');
        },
        set: function (value) {
            this._setOption('contextMenu', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "contextToolbox", {
        /**
         * Configures the context toolbox's settings.
         */
        get: function () {
            return this._getOption('contextToolbox');
        },
        set: function (value) {
            this._setOption('contextToolbox', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "customShapes", {
        /**
         * Provide access to an array of custom shapes.
         */
        get: function () {
            return this._getOption('customShapes');
        },
        set: function (value) {
            this._setOption('customShapes', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "customShapeTemplate", {
        /**
         * Specifies a custom template for shapes.
         */
        get: function () {
            return this._getOption('customShapeTemplate');
        },
        set: function (value) {
            this._setOption('customShapeTemplate', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "defaultItemProperties", {
        /**
         * Configures default item properties.
         */
        get: function () {
            return this._getOption('defaultItemProperties');
        },
        set: function (value) {
            this._setOption('defaultItemProperties', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "disabled", {
        /**
         * Specifies whether the widget responds to user interaction.
         */
        get: function () {
            return this._getOption('disabled');
        },
        set: function (value) {
            this._setOption('disabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "edges", {
        /**
         * Allows you to bind the collection of diagram edges to a data source. For more information, see the Data Binding section.
         */
        get: function () {
            return this._getOption('edges');
        },
        set: function (value) {
            this._setOption('edges', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "elementAttr", {
        /**
         * Specifies the attributes to be attached to the widget's root element.
         */
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "export", {
        /**
         * Configures export settings.
         */
        get: function () {
            return this._getOption('export');
        },
        set: function (value) {
            this._setOption('export', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "fullScreen", {
        /**
         * Specifies whether or not to display the widget in full-screen mode.
         */
        get: function () {
            return this._getOption('fullScreen');
        },
        set: function (value) {
            this._setOption('fullScreen', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "gridSize", {
        /**
         * Specifies the grid pitch.
         */
        get: function () {
            return this._getOption('gridSize');
        },
        set: function (value) {
            this._setOption('gridSize', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "hasChanges", {
        /**
         * Indicates whether diagram content has been changed.
         */
        get: function () {
            return this._getOption('hasChanges');
        },
        set: function (value) {
            this._setOption('hasChanges', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "height", {
        /**
         * Specifies the widget's height.
         */
        get: function () {
            return this._getOption('height');
        },
        set: function (value) {
            this._setOption('height', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "historyToolbar", {
        /**
         * Configures the history toolbar's settings.
         */
        get: function () {
            return this._getOption('historyToolbar');
        },
        set: function (value) {
            this._setOption('historyToolbar', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "mainToolbar", {
        /**
         * Configures the main toolbar settings.
         */
        get: function () {
            return this._getOption('mainToolbar');
        },
        set: function (value) {
            this._setOption('mainToolbar', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "nodes", {
        /**
         * Allows you to bind the collection of diagram nodes to a data source. For more information, see the Data Binding section.
         */
        get: function () {
            return this._getOption('nodes');
        },
        set: function (value) {
            this._setOption('nodes', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "pageColor", {
        /**
         * Specifies the color of a diagram page.
         */
        get: function () {
            return this._getOption('pageColor');
        },
        set: function (value) {
            this._setOption('pageColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "pageOrientation", {
        /**
         * Specifies the page orientation.
         */
        get: function () {
            return this._getOption('pageOrientation');
        },
        set: function (value) {
            this._setOption('pageOrientation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "pageSize", {
        /**
         * Specifies a size of pages.
         */
        get: function () {
            return this._getOption('pageSize');
        },
        set: function (value) {
            this._setOption('pageSize', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "propertiesPanel", {
        /**
         * Configures the Properties panel settings.
         */
        get: function () {
            return this._getOption('propertiesPanel');
        },
        set: function (value) {
            this._setOption('propertiesPanel', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "readOnly", {
        /**
         * Specifies whether the diagram is read-only.
         */
        get: function () {
            return this._getOption('readOnly');
        },
        set: function (value) {
            this._setOption('readOnly', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "rtlEnabled", {
        /**
         * Switches the widget to a right-to-left representation.
         */
        get: function () {
            return this._getOption('rtlEnabled');
        },
        set: function (value) {
            this._setOption('rtlEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "showGrid", {
        /**
         * Specifies whether grid lines are visible.
         */
        get: function () {
            return this._getOption('showGrid');
        },
        set: function (value) {
            this._setOption('showGrid', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "simpleView", {
        /**
         * Switch the Diagram widget to simple view mode.
         */
        get: function () {
            return this._getOption('simpleView');
        },
        set: function (value) {
            this._setOption('simpleView', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "snapToGrid", {
        /**
         * Specifies whether diagram elements should snap to grid lines.
         */
        get: function () {
            return this._getOption('snapToGrid');
        },
        set: function (value) {
            this._setOption('snapToGrid', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "toolbox", {
        /**
         * Configures the toolbox settings.
         */
        get: function () {
            return this._getOption('toolbox');
        },
        set: function (value) {
            this._setOption('toolbox', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "units", {
        /**
         * Specifies the unit for measurement options (for example, defaultHeight, gridSize, leftExpr).
         */
        get: function () {
            return this._getOption('units');
        },
        set: function (value) {
            this._setOption('units', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "viewToolbar", {
        /**
         * Configures the view toolbar settings.
         */
        get: function () {
            return this._getOption('viewToolbar');
        },
        set: function (value) {
            this._setOption('viewToolbar', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "viewUnits", {
        /**
         * Specifies the measurement unit that is displayed in user interface elements.
         */
        get: function () {
            return this._getOption('viewUnits');
        },
        set: function (value) {
            this._setOption('viewUnits', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "visible", {
        /**
         * Specifies whether the widget is visible.
         */
        get: function () {
            return this._getOption('visible');
        },
        set: function (value) {
            this._setOption('visible', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "width", {
        /**
         * Specifies the widget's width.
         */
        get: function () {
            return this._getOption('width');
        },
        set: function (value) {
            this._setOption('width', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "zoomLevel", {
        /**
         * Specifies the zoom level.
         */
        get: function () {
            return this._getOption('zoomLevel');
        },
        set: function (value) {
            this._setOption('zoomLevel', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxDiagramComponent.prototype, "customShapesChildren", {
        get: function () {
            return this._getOption('customShapes');
        },
        set: function (value) {
            this.setChildren('customShapes', value);
        },
        enumerable: true,
        configurable: true
    });
    DxDiagramComponent.prototype._createInstance = function (element, options) {
        return new DxDiagram(element, options);
    };
    DxDiagramComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    DxDiagramComponent.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        this.setupChanges('customShapes', changes);
    };
    DxDiagramComponent.prototype.setupChanges = function (prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    };
    DxDiagramComponent.prototype.ngDoCheck = function () {
        this._idh.doCheck('customShapes');
        this._watcherHelper.checkWatchers();
        _super.prototype.ngDoCheck.call(this);
        _super.prototype.clearChangedOptions.call(this);
    };
    DxDiagramComponent.prototype._setOption = function (name, value) {
        var isSetup = this._idh.setupSingle(name, value);
        var isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            _super.prototype._setOption.call(this, name, value);
        }
    };
    DxDiagramComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: DxTemplateHost },
        { type: WatcherHelper },
        { type: IterableDifferHelper },
        { type: NestedOptionHost },
        { type: TransferState },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxDiagramComponent.prototype, "autoZoomMode", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "contextMenu", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "contextToolbox", null);
    __decorate([
        Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], DxDiagramComponent.prototype, "customShapes", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "customShapeTemplate", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "defaultItemProperties", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxDiagramComponent.prototype, "disabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "edges", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "elementAttr", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "export", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxDiagramComponent.prototype, "fullScreen", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "gridSize", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxDiagramComponent.prototype, "hasChanges", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "height", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "historyToolbar", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "mainToolbar", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "nodes", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxDiagramComponent.prototype, "pageColor", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxDiagramComponent.prototype, "pageOrientation", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "pageSize", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "propertiesPanel", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxDiagramComponent.prototype, "readOnly", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxDiagramComponent.prototype, "rtlEnabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxDiagramComponent.prototype, "showGrid", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxDiagramComponent.prototype, "simpleView", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxDiagramComponent.prototype, "snapToGrid", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "toolbox", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxDiagramComponent.prototype, "units", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "viewToolbar", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxDiagramComponent.prototype, "viewUnits", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxDiagramComponent.prototype, "visible", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "width", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "zoomLevel", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "onContentReady", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "onCustomCommand", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "onDisposing", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "onInitialized", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "onItemClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "onItemDblClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "onOptionChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "onSelectionChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "autoZoomModeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "contextMenuChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "contextToolboxChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "customShapesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "customShapeTemplateChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "defaultItemPropertiesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "disabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "edgesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "elementAttrChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "exportChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "fullScreenChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "gridSizeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "hasChangesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "heightChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "historyToolbarChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "mainToolbarChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "nodesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "pageColorChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "pageOrientationChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "pageSizeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "propertiesPanelChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "readOnlyChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "rtlEnabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "showGridChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "simpleViewChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "snapToGridChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "toolboxChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "unitsChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "viewToolbarChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "viewUnitsChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "visibleChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "widthChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxDiagramComponent.prototype, "zoomLevelChange", void 0);
    __decorate([
        ContentChildren(DxiCustomShapeComponent),
        __metadata("design:type", QueryList),
        __metadata("design:paramtypes", [Object])
    ], DxDiagramComponent.prototype, "customShapesChildren", null);
    DxDiagramComponent = __decorate([
        Component({
            selector: 'dx-diagram',
            template: '',
            providers: [
                DxTemplateHost,
                WatcherHelper,
                NestedOptionHost,
                IterableDifferHelper
            ]
        }),
        __param(7, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
            WatcherHelper,
            IterableDifferHelper,
            NestedOptionHost,
            TransferState, Object])
    ], DxDiagramComponent);
    return DxDiagramComponent;
}(DxComponent));
var DxDiagramModule = /** @class */ (function () {
    function DxDiagramModule() {
    }
    DxDiagramModule = __decorate([
        NgModule({
            imports: [
                DxoContextMenuModule,
                DxiCommandModule,
                DxiItemModule,
                DxoContextToolboxModule,
                DxiCustomShapeModule,
                DxiConnectionPointModule,
                DxoDefaultItemPropertiesModule,
                DxoEdgesModule,
                DxoExportModule,
                DxoGridSizeModule,
                DxoHistoryToolbarModule,
                DxoMainToolbarModule,
                DxoNodesModule,
                DxoAutoLayoutModule,
                DxoPageSizeModule,
                DxoPropertiesPanelModule,
                DxiTabModule,
                DxiGroupModule,
                DxoToolboxModule,
                DxoViewToolbarModule,
                DxoZoomLevelModule,
                DxIntegrationModule,
                DxTemplateModule,
                BrowserTransferStateModule
            ],
            declarations: [
                DxDiagramComponent
            ],
            exports: [
                DxDiagramComponent,
                DxoContextMenuModule,
                DxiCommandModule,
                DxiItemModule,
                DxoContextToolboxModule,
                DxiCustomShapeModule,
                DxiConnectionPointModule,
                DxoDefaultItemPropertiesModule,
                DxoEdgesModule,
                DxoExportModule,
                DxoGridSizeModule,
                DxoHistoryToolbarModule,
                DxoMainToolbarModule,
                DxoNodesModule,
                DxoAutoLayoutModule,
                DxoPageSizeModule,
                DxoPropertiesPanelModule,
                DxiTabModule,
                DxiGroupModule,
                DxoToolboxModule,
                DxoViewToolbarModule,
                DxoZoomLevelModule,
                DxTemplateModule
            ]
        })
    ], DxDiagramModule);
    return DxDiagramModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { DxDiagramComponent, DxDiagramModule };
//# sourceMappingURL=devextreme-angular-ui-diagram.js.map
