import { __extends, __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';
import 'devextreme/bundles/dx.all';
import DxGantt from 'devextreme/ui/gantt';
import { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxiColumnComponent, DxiStripLineComponent, DxiColumnModule, DxiButtonModule, DxoHeaderFilterModule, DxoLookupModule, DxoFormatModule, DxoFormItemModule, DxoLabelModule, DxiValidationRuleModule, DxoDependenciesModule, DxoEditingModule, DxoResourceAssignmentsModule, DxoResourcesModule, DxiStripLineModule, DxoTasksModule, DxoToolbarModule, DxiItemModule, DxoValidationModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/**
 * The Gantt is a widget that displays the task flow and dependencies between tasks.
 */
var DxGanttComponent = /** @class */ (function (_super) {
    __extends(DxGanttComponent, _super);
    function DxGanttComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
        _this._watcherHelper = _watcherHelper;
        _this._idh = _idh;
        _this._createEventEmitters([
            { subscribe: 'contentReady', emit: 'onContentReady' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
            { emit: 'accessKeyChange' },
            { emit: 'activeStateEnabledChange' },
            { emit: 'allowSelectionChange' },
            { emit: 'columnsChange' },
            { emit: 'dependenciesChange' },
            { emit: 'disabledChange' },
            { emit: 'editingChange' },
            { emit: 'elementAttrChange' },
            { emit: 'firstDayOfWeekChange' },
            { emit: 'focusStateEnabledChange' },
            { emit: 'heightChange' },
            { emit: 'hintChange' },
            { emit: 'hoverStateEnabledChange' },
            { emit: 'resourceAssignmentsChange' },
            { emit: 'resourcesChange' },
            { emit: 'scaleTypeChange' },
            { emit: 'selectedRowKeyChange' },
            { emit: 'showResourcesChange' },
            { emit: 'showRowLinesChange' },
            { emit: 'stripLinesChange' },
            { emit: 'tabIndexChange' },
            { emit: 'taskListWidthChange' },
            { emit: 'tasksChange' },
            { emit: 'taskTitlePositionChange' },
            { emit: 'toolbarChange' },
            { emit: 'validationChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' }
        ]);
        _this._idh.setHost(_this);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxGanttComponent.prototype, "accessKey", {
        /**
         * Specifies the shortcut key that sets focus on the widget.
         */
        get: function () {
            return this._getOption('accessKey');
        },
        set: function (value) {
            this._setOption('accessKey', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "activeStateEnabled", {
        /**
         * Specifies whether or not the widget changes its state when interacting with a user.
         */
        get: function () {
            return this._getOption('activeStateEnabled');
        },
        set: function (value) {
            this._setOption('activeStateEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "allowSelection", {
        /**
         * Specifies whether users can select tasks in the Gantt.
         */
        get: function () {
            return this._getOption('allowSelection');
        },
        set: function (value) {
            this._setOption('allowSelection', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "columns", {
        /**
         * An array of columns in the Gantt.
         */
        get: function () {
            return this._getOption('columns');
        },
        set: function (value) {
            this._setOption('columns', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "dependencies", {
        /**
         * Configures dependencies.
         */
        get: function () {
            return this._getOption('dependencies');
        },
        set: function (value) {
            this._setOption('dependencies', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "disabled", {
        /**
         * Specifies whether the widget responds to user interaction.
         */
        get: function () {
            return this._getOption('disabled');
        },
        set: function (value) {
            this._setOption('disabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "editing", {
        /**
         * Configures edit options.
         */
        get: function () {
            return this._getOption('editing');
        },
        set: function (value) {
            this._setOption('editing', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "elementAttr", {
        /**
         * Specifies the attributes to be attached to the widget's root element.
         */
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "firstDayOfWeek", {
        get: function () {
            return this._getOption('firstDayOfWeek');
        },
        set: function (value) {
            this._setOption('firstDayOfWeek', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "focusStateEnabled", {
        /**
         * Specifies whether the widget can be focused using keyboard navigation.
         */
        get: function () {
            return this._getOption('focusStateEnabled');
        },
        set: function (value) {
            this._setOption('focusStateEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "height", {
        /**
         * Specifies the widget's height.
         */
        get: function () {
            return this._getOption('height');
        },
        set: function (value) {
            this._setOption('height', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "hint", {
        /**
         * Specifies text for a hint that appears when a user pauses on the widget.
         */
        get: function () {
            return this._getOption('hint');
        },
        set: function (value) {
            this._setOption('hint', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "hoverStateEnabled", {
        /**
         * Specifies whether the widget changes its state when a user pauses on it.
         */
        get: function () {
            return this._getOption('hoverStateEnabled');
        },
        set: function (value) {
            this._setOption('hoverStateEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "resourceAssignments", {
        /**
         * Configures resource assignments.
         */
        get: function () {
            return this._getOption('resourceAssignments');
        },
        set: function (value) {
            this._setOption('resourceAssignments', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "resources", {
        /**
         * Configures task resources.
         */
        get: function () {
            return this._getOption('resources');
        },
        set: function (value) {
            this._setOption('resources', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "scaleType", {
        /**
         * Specifies the zoom level of tasks in the Gantt chart.
         */
        get: function () {
            return this._getOption('scaleType');
        },
        set: function (value) {
            this._setOption('scaleType', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "selectedRowKey", {
        /**
         * Allows you to select a row or determine which row is selected.
         */
        get: function () {
            return this._getOption('selectedRowKey');
        },
        set: function (value) {
            this._setOption('selectedRowKey', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "showResources", {
        /**
         * Specifies whether to display task resources.
         */
        get: function () {
            return this._getOption('showResources');
        },
        set: function (value) {
            this._setOption('showResources', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "showRowLines", {
        /**
         * Specifies whether to show/hide horizontal faint lines that separate tasks.
         */
        get: function () {
            return this._getOption('showRowLines');
        },
        set: function (value) {
            this._setOption('showRowLines', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "stripLines", {
        /**
         * Configures strip lines.
         */
        get: function () {
            return this._getOption('stripLines');
        },
        set: function (value) {
            this._setOption('stripLines', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "tabIndex", {
        /**
         * Specifies the number of the element when the Tab key is used for navigating.
         */
        get: function () {
            return this._getOption('tabIndex');
        },
        set: function (value) {
            this._setOption('tabIndex', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "taskListWidth", {
        /**
         * Specifies the width of the task list in pixels.
         */
        get: function () {
            return this._getOption('taskListWidth');
        },
        set: function (value) {
            this._setOption('taskListWidth', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "tasks", {
        /**
         * Configures tasks.
         */
        get: function () {
            return this._getOption('tasks');
        },
        set: function (value) {
            this._setOption('tasks', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "taskTitlePosition", {
        /**
         * Specifies a task's title position.
         */
        get: function () {
            return this._getOption('taskTitlePosition');
        },
        set: function (value) {
            this._setOption('taskTitlePosition', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "toolbar", {
        /**
         * Configures toolbar settings.
         */
        get: function () {
            return this._getOption('toolbar');
        },
        set: function (value) {
            this._setOption('toolbar', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "validation", {
        /**
         * Configures validation options.
         */
        get: function () {
            return this._getOption('validation');
        },
        set: function (value) {
            this._setOption('validation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "visible", {
        /**
         * Specifies whether the widget is visible.
         */
        get: function () {
            return this._getOption('visible');
        },
        set: function (value) {
            this._setOption('visible', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "width", {
        /**
         * Specifies the widget's width.
         */
        get: function () {
            return this._getOption('width');
        },
        set: function (value) {
            this._setOption('width', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "columnsChildren", {
        get: function () {
            return this._getOption('columns');
        },
        set: function (value) {
            this.setChildren('columns', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxGanttComponent.prototype, "stripLinesChildren", {
        get: function () {
            return this._getOption('stripLines');
        },
        set: function (value) {
            this.setChildren('stripLines', value);
        },
        enumerable: true,
        configurable: true
    });
    DxGanttComponent.prototype._createInstance = function (element, options) {
        return new DxGantt(element, options);
    };
    DxGanttComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    DxGanttComponent.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        this.setupChanges('columns', changes);
        this.setupChanges('stripLines', changes);
    };
    DxGanttComponent.prototype.setupChanges = function (prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    };
    DxGanttComponent.prototype.ngDoCheck = function () {
        this._idh.doCheck('columns');
        this._idh.doCheck('stripLines');
        this._watcherHelper.checkWatchers();
        _super.prototype.ngDoCheck.call(this);
        _super.prototype.clearChangedOptions.call(this);
    };
    DxGanttComponent.prototype._setOption = function (name, value) {
        var isSetup = this._idh.setupSingle(name, value);
        var isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            _super.prototype._setOption.call(this, name, value);
        }
    };
    DxGanttComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: DxTemplateHost },
        { type: WatcherHelper },
        { type: IterableDifferHelper },
        { type: NestedOptionHost },
        { type: TransferState },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxGanttComponent.prototype, "accessKey", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "activeStateEnabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "allowSelection", null);
    __decorate([
        Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], DxGanttComponent.prototype, "columns", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "dependencies", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "disabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "editing", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "elementAttr", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "firstDayOfWeek", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "focusStateEnabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "height", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxGanttComponent.prototype, "hint", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "hoverStateEnabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "resourceAssignments", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "resources", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxGanttComponent.prototype, "scaleType", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "selectedRowKey", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "showResources", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "showRowLines", null);
    __decorate([
        Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], DxGanttComponent.prototype, "stripLines", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DxGanttComponent.prototype, "tabIndex", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DxGanttComponent.prototype, "taskListWidth", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "tasks", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DxGanttComponent.prototype, "taskTitlePosition", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "toolbar", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "validation", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DxGanttComponent.prototype, "visible", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "width", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onContentReady", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onDisposing", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onInitialized", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onOptionChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "onSelectionChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "accessKeyChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "activeStateEnabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "allowSelectionChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "columnsChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "dependenciesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "disabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "editingChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "elementAttrChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "firstDayOfWeekChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "focusStateEnabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "heightChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "hintChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "hoverStateEnabledChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "resourceAssignmentsChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "resourcesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "scaleTypeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "selectedRowKeyChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "showResourcesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "showRowLinesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "stripLinesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "tabIndexChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "taskListWidthChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "tasksChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "taskTitlePositionChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "toolbarChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "validationChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "visibleChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DxGanttComponent.prototype, "widthChange", void 0);
    __decorate([
        ContentChildren(DxiColumnComponent),
        __metadata("design:type", QueryList),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "columnsChildren", null);
    __decorate([
        ContentChildren(DxiStripLineComponent),
        __metadata("design:type", QueryList),
        __metadata("design:paramtypes", [Object])
    ], DxGanttComponent.prototype, "stripLinesChildren", null);
    DxGanttComponent = __decorate([
        Component({
            selector: 'dx-gantt',
            template: '',
            providers: [
                DxTemplateHost,
                WatcherHelper,
                NestedOptionHost,
                IterableDifferHelper
            ]
        }),
        __param(7, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
            WatcherHelper,
            IterableDifferHelper,
            NestedOptionHost,
            TransferState, Object])
    ], DxGanttComponent);
    return DxGanttComponent;
}(DxComponent));
var DxGanttModule = /** @class */ (function () {
    function DxGanttModule() {
    }
    DxGanttModule = __decorate([
        NgModule({
            imports: [
                DxiColumnModule,
                DxiButtonModule,
                DxoHeaderFilterModule,
                DxoLookupModule,
                DxoFormatModule,
                DxoFormItemModule,
                DxoLabelModule,
                DxiValidationRuleModule,
                DxoDependenciesModule,
                DxoEditingModule,
                DxoResourceAssignmentsModule,
                DxoResourcesModule,
                DxiStripLineModule,
                DxoTasksModule,
                DxoToolbarModule,
                DxiItemModule,
                DxoValidationModule,
                DxIntegrationModule,
                DxTemplateModule,
                BrowserTransferStateModule
            ],
            declarations: [
                DxGanttComponent
            ],
            exports: [
                DxGanttComponent,
                DxiColumnModule,
                DxiButtonModule,
                DxoHeaderFilterModule,
                DxoLookupModule,
                DxoFormatModule,
                DxoFormItemModule,
                DxoLabelModule,
                DxiValidationRuleModule,
                DxoDependenciesModule,
                DxoEditingModule,
                DxoResourceAssignmentsModule,
                DxoResourcesModule,
                DxiStripLineModule,
                DxoTasksModule,
                DxoToolbarModule,
                DxiItemModule,
                DxoValidationModule,
                DxTemplateModule
            ]
        })
    ], DxGanttModule);
    return DxGanttModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { DxGanttComponent, DxGanttModule };
//# sourceMappingURL=devextreme-angular-ui-gantt.js.map
