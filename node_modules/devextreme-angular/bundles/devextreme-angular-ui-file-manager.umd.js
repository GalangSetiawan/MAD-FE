(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/bundles/dx.all'), require('devextreme/ui/file_manager'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :
    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/file-manager', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/bundles/dx.all', 'devextreme/ui/file_manager', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :
    (global = global || self, factory((global['devextreme-angular'] = global['devextreme-angular'] || {}, global['devextreme-angular'].ui = global['devextreme-angular'].ui || {}, global['devextreme-angular'].ui['file-manager'] = {}), global.ng.platformBrowser, global.ng.core, null, global.DxFileManager, global['devextreme-angular'].core, global['devextreme-angular'].ui.nested));
}(this, (function (exports, platformBrowser, core, dx_all, DxFileManager, core$1, nested) { 'use strict';

    DxFileManager = DxFileManager && Object.prototype.hasOwnProperty.call(DxFileManager, 'default') ? DxFileManager['default'] : DxFileManager;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /*!
     * devextreme-angular
     * Version: 20.1.6
     * Build date: Fri Jul 17 2020
     *
     * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
     *
     * This software may be modified and distributed under the terms
     * of the MIT license. See the LICENSE file in the root of the project for details.
     *
     * https://github.com/DevExpress/devextreme-angular
     */
    /**
     * The FileManager is a widget that allows users to upload, select, and manage files and directories in different file storages.
     */
    var DxFileManagerComponent = /** @class */ (function (_super) {
        __extends(DxFileManagerComponent, _super);
        function DxFileManagerComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
            _this._watcherHelper = _watcherHelper;
            _this._idh = _idh;
            _this._createEventEmitters([
                { subscribe: 'contentReady', emit: 'onContentReady' },
                { subscribe: 'contextMenuItemClick', emit: 'onContextMenuItemClick' },
                { subscribe: 'currentDirectoryChanged', emit: 'onCurrentDirectoryChanged' },
                { subscribe: 'disposing', emit: 'onDisposing' },
                { subscribe: 'errorOccurred', emit: 'onErrorOccurred' },
                { subscribe: 'focusedItemChanged', emit: 'onFocusedItemChanged' },
                { subscribe: 'initialized', emit: 'onInitialized' },
                { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                { subscribe: 'selectedFileOpened', emit: 'onSelectedFileOpened' },
                { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
                { subscribe: 'toolbarItemClick', emit: 'onToolbarItemClick' },
                { emit: 'accessKeyChange' },
                { emit: 'activeStateEnabledChange' },
                { emit: 'allowedFileExtensionsChange' },
                { emit: 'contextMenuChange' },
                { emit: 'currentPathChange' },
                { emit: 'currentPathKeysChange' },
                { emit: 'customizeDetailColumnsChange' },
                { emit: 'customizeThumbnailChange' },
                { emit: 'disabledChange' },
                { emit: 'elementAttrChange' },
                { emit: 'fileSystemProviderChange' },
                { emit: 'focusedItemKeyChange' },
                { emit: 'focusStateEnabledChange' },
                { emit: 'heightChange' },
                { emit: 'hintChange' },
                { emit: 'hoverStateEnabledChange' },
                { emit: 'itemViewChange' },
                { emit: 'permissionsChange' },
                { emit: 'rootFolderNameChange' },
                { emit: 'rtlEnabledChange' },
                { emit: 'selectedItemKeysChange' },
                { emit: 'selectionModeChange' },
                { emit: 'tabIndexChange' },
                { emit: 'toolbarChange' },
                { emit: 'uploadChange' },
                { emit: 'visibleChange' },
                { emit: 'widthChange' }
            ]);
            _this._idh.setHost(_this);
            optionHost.setHost(_this);
            return _this;
        }
        Object.defineProperty(DxFileManagerComponent.prototype, "accessKey", {
            /**
             * Specifies the shortcut key that sets focus on the widget.
             */
            get: function () {
                return this._getOption('accessKey');
            },
            set: function (value) {
                this._setOption('accessKey', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "activeStateEnabled", {
            /**
             * Specifies whether or not the widget changes its state when interacting with a user.
             */
            get: function () {
                return this._getOption('activeStateEnabled');
            },
            set: function (value) {
                this._setOption('activeStateEnabled', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "allowedFileExtensions", {
            /**
             * Specifies the allowed upload file extensions.
             */
            get: function () {
                return this._getOption('allowedFileExtensions');
            },
            set: function (value) {
                this._setOption('allowedFileExtensions', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "contextMenu", {
            /**
             * Configures the context menu settings.
             */
            get: function () {
                return this._getOption('contextMenu');
            },
            set: function (value) {
                this._setOption('contextMenu', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "currentPath", {
            /**
             * Specifies the path that is used when the FileManager is initialized.
             */
            get: function () {
                return this._getOption('currentPath');
            },
            set: function (value) {
                this._setOption('currentPath', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "currentPathKeys", {
            /**
             * Specifies an array of path keys to the current location.
             */
            get: function () {
                return this._getOption('currentPathKeys');
            },
            set: function (value) {
                this._setOption('currentPathKeys', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "customizeDetailColumns", {
            /**
             * Customizes columns in details view. Applies only if itemView.mode is "details".
             */
            get: function () {
                return this._getOption('customizeDetailColumns');
            },
            set: function (value) {
                this._setOption('customizeDetailColumns', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "customizeThumbnail", {
            /**
             * Allows you to provide custom icons to be used as thumbnails.
             */
            get: function () {
                return this._getOption('customizeThumbnail');
            },
            set: function (value) {
                this._setOption('customizeThumbnail', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "disabled", {
            /**
             * Specifies whether the widget responds to user interaction.
             */
            get: function () {
                return this._getOption('disabled');
            },
            set: function (value) {
                this._setOption('disabled', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "elementAttr", {
            /**
             * Specifies the attributes to be attached to the widget's root element.
             */
            get: function () {
                return this._getOption('elementAttr');
            },
            set: function (value) {
                this._setOption('elementAttr', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "fileSystemProvider", {
            /**
             * Specifies the file system provider.
             */
            get: function () {
                return this._getOption('fileSystemProvider');
            },
            set: function (value) {
                this._setOption('fileSystemProvider', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "focusedItemKey", {
            /**
             * Specifies a key of the initially or currently focused item.
             */
            get: function () {
                return this._getOption('focusedItemKey');
            },
            set: function (value) {
                this._setOption('focusedItemKey', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "focusStateEnabled", {
            /**
             * Specifies whether the widget can be focused using keyboard navigation.
             */
            get: function () {
                return this._getOption('focusStateEnabled');
            },
            set: function (value) {
                this._setOption('focusStateEnabled', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "height", {
            /**
             * Specifies the widget's height.
             */
            get: function () {
                return this._getOption('height');
            },
            set: function (value) {
                this._setOption('height', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "hint", {
            /**
             * Specifies text for a hint that appears when a user pauses on the widget.
             */
            get: function () {
                return this._getOption('hint');
            },
            set: function (value) {
                this._setOption('hint', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "hoverStateEnabled", {
            /**
             * Specifies whether the widget changes its state when a user pauses on it.
             */
            get: function () {
                return this._getOption('hoverStateEnabled');
            },
            set: function (value) {
                this._setOption('hoverStateEnabled', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "itemView", {
            /**
             * Configures the file and folder view.
             */
            get: function () {
                return this._getOption('itemView');
            },
            set: function (value) {
                this._setOption('itemView', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "permissions", {
            /**
             * Specifies actions that a user is allowed to perform on files and folders.
             */
            get: function () {
                return this._getOption('permissions');
            },
            set: function (value) {
                this._setOption('permissions', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "rootFolderName", {
            /**
             * Specifies the root folder name.
             */
            get: function () {
                return this._getOption('rootFolderName');
            },
            set: function (value) {
                this._setOption('rootFolderName', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "rtlEnabled", {
            /**
             * Switches the widget to a right-to-left representation.
             */
            get: function () {
                return this._getOption('rtlEnabled');
            },
            set: function (value) {
                this._setOption('rtlEnabled', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "selectedItemKeys", {
            /**
             * Contains an array of initially or currently selected files and directories' keys.
             */
            get: function () {
                return this._getOption('selectedItemKeys');
            },
            set: function (value) {
                this._setOption('selectedItemKeys', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "selectionMode", {
            /**
             * Specifies whether a user can select a single or multiple files and folders in the item view simultaneously.
             */
            get: function () {
                return this._getOption('selectionMode');
            },
            set: function (value) {
                this._setOption('selectionMode', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "tabIndex", {
            /**
             * Specifies the number of the element when the Tab key is used for navigating.
             */
            get: function () {
                return this._getOption('tabIndex');
            },
            set: function (value) {
                this._setOption('tabIndex', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "toolbar", {
            /**
             * Configures toolbar settings.
             */
            get: function () {
                return this._getOption('toolbar');
            },
            set: function (value) {
                this._setOption('toolbar', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "upload", {
            /**
             * Configures upload settings.
             */
            get: function () {
                return this._getOption('upload');
            },
            set: function (value) {
                this._setOption('upload', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "visible", {
            /**
             * Specifies whether the widget is visible.
             */
            get: function () {
                return this._getOption('visible');
            },
            set: function (value) {
                this._setOption('visible', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DxFileManagerComponent.prototype, "width", {
            /**
             * Specifies the widget's width.
             */
            get: function () {
                return this._getOption('width');
            },
            set: function (value) {
                this._setOption('width', value);
            },
            enumerable: true,
            configurable: true
        });
        DxFileManagerComponent.prototype._createInstance = function (element, options) {
            return new DxFileManager(element, options);
        };
        DxFileManagerComponent.prototype.ngOnDestroy = function () {
            this._destroyWidget();
        };
        DxFileManagerComponent.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            this.setupChanges('allowedFileExtensions', changes);
            this.setupChanges('currentPathKeys', changes);
            this.setupChanges('selectedItemKeys', changes);
        };
        DxFileManagerComponent.prototype.setupChanges = function (prop, changes) {
            if (!(prop in this._optionsToUpdate)) {
                this._idh.setup(prop, changes);
            }
        };
        DxFileManagerComponent.prototype.ngDoCheck = function () {
            this._idh.doCheck('allowedFileExtensions');
            this._idh.doCheck('currentPathKeys');
            this._idh.doCheck('selectedItemKeys');
            this._watcherHelper.checkWatchers();
            _super.prototype.ngDoCheck.call(this);
            _super.prototype.clearChangedOptions.call(this);
        };
        DxFileManagerComponent.prototype._setOption = function (name, value) {
            var isSetup = this._idh.setupSingle(name, value);
            var isChanged = this._idh.getChanges(name, value) !== null;
            if (isSetup || isChanged) {
                _super.prototype._setOption.call(this, name, value);
            }
        };
        DxFileManagerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.NgZone },
            { type: core$1.DxTemplateHost },
            { type: core$1.WatcherHelper },
            { type: core$1.IterableDifferHelper },
            { type: core$1.NestedOptionHost },
            { type: platformBrowser.TransferState },
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], DxFileManagerComponent.prototype, "accessKey", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], DxFileManagerComponent.prototype, "activeStateEnabled", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], DxFileManagerComponent.prototype, "allowedFileExtensions", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DxFileManagerComponent.prototype, "contextMenu", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], DxFileManagerComponent.prototype, "currentPath", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], DxFileManagerComponent.prototype, "currentPathKeys", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Function])
        ], DxFileManagerComponent.prototype, "customizeDetailColumns", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Function])
        ], DxFileManagerComponent.prototype, "customizeThumbnail", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], DxFileManagerComponent.prototype, "disabled", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DxFileManagerComponent.prototype, "elementAttr", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DxFileManagerComponent.prototype, "fileSystemProvider", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], DxFileManagerComponent.prototype, "focusedItemKey", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], DxFileManagerComponent.prototype, "focusStateEnabled", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DxFileManagerComponent.prototype, "height", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], DxFileManagerComponent.prototype, "hint", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], DxFileManagerComponent.prototype, "hoverStateEnabled", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DxFileManagerComponent.prototype, "itemView", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DxFileManagerComponent.prototype, "permissions", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], DxFileManagerComponent.prototype, "rootFolderName", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], DxFileManagerComponent.prototype, "rtlEnabled", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], DxFileManagerComponent.prototype, "selectedItemKeys", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], DxFileManagerComponent.prototype, "selectionMode", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], DxFileManagerComponent.prototype, "tabIndex", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DxFileManagerComponent.prototype, "toolbar", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DxFileManagerComponent.prototype, "upload", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], DxFileManagerComponent.prototype, "visible", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DxFileManagerComponent.prototype, "width", null);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "onContentReady", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "onContextMenuItemClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "onCurrentDirectoryChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "onDisposing", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "onErrorOccurred", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "onFocusedItemChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "onInitialized", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "onOptionChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "onSelectedFileOpened", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "onSelectionChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "onToolbarItemClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "accessKeyChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "activeStateEnabledChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "allowedFileExtensionsChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "contextMenuChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "currentPathChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "currentPathKeysChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "customizeDetailColumnsChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "customizeThumbnailChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "disabledChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "elementAttrChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "fileSystemProviderChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "focusedItemKeyChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "focusStateEnabledChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "heightChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "hintChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "hoverStateEnabledChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "itemViewChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "permissionsChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "rootFolderNameChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "rtlEnabledChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "selectedItemKeysChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "selectionModeChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "tabIndexChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "toolbarChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "uploadChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "visibleChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], DxFileManagerComponent.prototype, "widthChange", void 0);
        DxFileManagerComponent = __decorate([
            core.Component({
                selector: 'dx-file-manager',
                template: '',
                providers: [
                    core$1.DxTemplateHost,
                    core$1.WatcherHelper,
                    core$1.NestedOptionHost,
                    core$1.IterableDifferHelper
                ]
            }),
            __param(7, core.Inject(core.PLATFORM_ID)),
            __metadata("design:paramtypes", [core.ElementRef, core.NgZone, core$1.DxTemplateHost,
                core$1.WatcherHelper,
                core$1.IterableDifferHelper,
                core$1.NestedOptionHost,
                platformBrowser.TransferState, Object])
        ], DxFileManagerComponent);
        return DxFileManagerComponent;
    }(core$1.DxComponent));
    var DxFileManagerModule = /** @class */ (function () {
        function DxFileManagerModule() {
        }
        DxFileManagerModule = __decorate([
            core.NgModule({
                imports: [
                    nested.DxoContextMenuModule,
                    nested.DxiItemModule,
                    nested.DxoItemViewModule,
                    nested.DxoDetailsModule,
                    nested.DxiColumnModule,
                    nested.DxoPermissionsModule,
                    nested.DxoToolbarModule,
                    nested.DxiFileSelectionItemModule,
                    nested.DxoUploadModule,
                    core$1.DxIntegrationModule,
                    core$1.DxTemplateModule,
                    platformBrowser.BrowserTransferStateModule
                ],
                declarations: [
                    DxFileManagerComponent
                ],
                exports: [
                    DxFileManagerComponent,
                    nested.DxoContextMenuModule,
                    nested.DxiItemModule,
                    nested.DxoItemViewModule,
                    nested.DxoDetailsModule,
                    nested.DxiColumnModule,
                    nested.DxoPermissionsModule,
                    nested.DxoToolbarModule,
                    nested.DxiFileSelectionItemModule,
                    nested.DxoUploadModule,
                    core$1.DxTemplateModule
                ]
            })
        ], DxFileManagerModule);
        return DxFileManagerModule;
    }());

    exports.DxFileManagerComponent = DxFileManagerComponent;
    exports.DxFileManagerModule = DxFileManagerModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=devextreme-angular-ui-file-manager.umd.js.map
