/*!
 * devextreme-angular
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { EventEmitter } from '@angular/core';
import { DX_TEMPLATE_WRAPPER_CLASS } from './template';
import { getElement } from './utils';
import render from 'devextreme/core/renderer';
import * as events from 'devextreme/events';
import * as domAdapter from 'devextreme/core/dom_adapter';
const VISIBILITY_CHANGE_SELECTOR = 'dx-visibility-change-handler';
export class BaseNestedOption {
    constructor() {
        this._initialOptions = {};
        this._collectionContainerImpl = new CollectionNestedOptionContainerImpl(this._setOption.bind(this), this._filterItems.bind(this));
    }
    _optionChangedHandler(e) {
        let fullOptionPath = this._fullOptionPath();
        if (e.fullName.indexOf(fullOptionPath) === 0) {
            let optionName = e.fullName.slice(fullOptionPath.length);
            let emitter = this[optionName + 'Change'];
            if (emitter) {
                emitter.next(e.value);
            }
        }
    }
    _createEventEmitters(events) {
        events.forEach(event => {
            this[event.emit] = new EventEmitter();
        });
    }
    _getOption(name) {
        if (this.isLinked) {
            return this.instance.option(this._fullOptionPath() + name);
        }
        else {
            return this._initialOptions[name];
        }
    }
    _setOption(name, value) {
        if (this.isLinked) {
            const fullPath = this._fullOptionPath() + name;
            this.instance.option(fullPath, value);
        }
        else {
            this._initialOptions[name] = value;
        }
    }
    _addRemovedOption(name) {
        if (this.instance && this.removedNestedComponents) {
            this.removedNestedComponents.push(name);
        }
    }
    _addRecreatedComponent() {
        if (this.instance && this.recreatedNestedComponents) {
            this.recreatedNestedComponents.push({ getOptionPath: () => this._getOptionPath() });
        }
    }
    _getOptionPath() {
        return this._hostOptionPath() + this._optionPath;
    }
    setHost(host, optionPath) {
        this._host = host;
        this._hostOptionPath = optionPath;
        this.optionChangedHandlers.subscribe(this._optionChangedHandler.bind(this));
    }
    setChildren(propertyName, items) {
        return this._collectionContainerImpl.setChildren(propertyName, items);
    }
    _filterItems(items) {
        return items.filter((item) => { return item !== this; });
    }
    get instance() {
        return this._host && this._host.instance;
    }
    get removedNestedComponents() {
        return this._host && this._host.removedNestedComponents;
    }
    get recreatedNestedComponents() {
        return this._host && this._host.recreatedNestedComponents;
    }
    get isLinked() {
        return !!this.instance && this._host.isLinked;
    }
    get optionChangedHandlers() {
        return this._host && this._host.optionChangedHandlers;
    }
}
export class CollectionNestedOptionContainerImpl {
    constructor(_setOption, _filterItems) {
        this._setOption = _setOption;
        this._filterItems = _filterItems;
        this._activatedQueries = {};
    }
    setChildren(propertyName, items) {
        if (this._filterItems) {
            items = this._filterItems(items);
        }
        if (items.length) {
            this._activatedQueries[propertyName] = true;
        }
        if (this._activatedQueries[propertyName]) {
            let widgetItems = items.map((item, index) => {
                item._index = index;
                return item._value;
            });
            this._setOption(propertyName, widgetItems);
        }
    }
}
export class NestedOption extends BaseNestedOption {
    setHost(host, optionPath) {
        super.setHost(host, optionPath);
        this._host[this._optionPath] = this._initialOptions;
    }
    _fullOptionPath() {
        return this._getOptionPath() + '.';
    }
}
export class CollectionNestedOption extends BaseNestedOption {
    _fullOptionPath() {
        return `${this._getOptionPath()}[${this._index}].`;
    }
    get _value() {
        return this._initialOptions;
    }
    get isLinked() {
        return this._index !== undefined && !!this.instance && this._host.isLinked;
    }
}
let triggerShownEvent = function (element) {
    let changeHandlers = [];
    if (!render(element).hasClass(VISIBILITY_CHANGE_SELECTOR)) {
        changeHandlers.push(element);
    }
    changeHandlers.push.apply(changeHandlers, element.querySelectorAll('.' + VISIBILITY_CHANGE_SELECTOR));
    for (let i = 0; i < changeHandlers.length; i++) {
        events.triggerHandler(changeHandlers[i], 'dxshown');
    }
};
const ɵ0 = triggerShownEvent;
export function extractTemplate(option, element, renderer, document) {
    if (!option.template === undefined || !element.nativeElement.hasChildNodes()) {
        return;
    }
    let childNodes = [].slice.call(element.nativeElement.childNodes);
    let userContent = childNodes.filter((n) => {
        if (n.tagName) {
            let tagNamePrefix = n.tagName.toLowerCase().substr(0, 3);
            return !(tagNamePrefix === 'dxi' || tagNamePrefix === 'dxo');
        }
        else {
            return n.nodeName !== '#comment' && n.textContent.replace(/\s/g, '').length;
        }
    });
    if (!userContent.length) {
        return;
    }
    option.template = {
        render: (renderData) => {
            let result = element.nativeElement;
            domAdapter.setClass(result, DX_TEMPLATE_WRAPPER_CLASS, true);
            if (renderData.container) {
                let container = getElement(renderData.container);
                let resultInContainer = container.contains(element.nativeElement);
                renderer.appendChild(container, element.nativeElement);
                if (!resultInContainer) {
                    let resultInBody = document.body.contains(container);
                    if (resultInBody) {
                        triggerShownEvent(result);
                    }
                }
            }
            return result;
        }
    };
}
export class NestedOptionHost {
    getHost() {
        return this._host;
    }
    setHost(host, optionPath) {
        this._host = host;
        this._optionPath = optionPath || (() => '');
    }
    setNestedOption(nestedOption) {
        nestedOption.setHost(this._host, this._optionPath);
    }
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,