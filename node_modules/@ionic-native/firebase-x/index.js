var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FirebaseXOriginal = /** @class */ (function (_super) {
    __extends(FirebaseXOriginal, _super);
    function FirebaseXOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseXOriginal.prototype.getToken = function () { return cordova(this, "getToken", {}, arguments); };
    FirebaseXOriginal.prototype.getId = function () { return cordova(this, "getId", {}, arguments); };
    FirebaseXOriginal.prototype.getCurrentUser = function () { return cordova(this, "getCurrentUser", {}, arguments); };
    FirebaseXOriginal.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true }, arguments); };
    FirebaseXOriginal.prototype.getAPNSToken = function () { return cordova(this, "getAPNSToken", {}, arguments); };
    FirebaseXOriginal.prototype.onApnsTokenReceived = function () { return cordova(this, "onApnsTokenReceived", { "observable": true }, arguments); };
    FirebaseXOriginal.prototype.onMessageReceived = function () { return cordova(this, "onMessageReceived", { "observable": true }, arguments); };
    FirebaseXOriginal.prototype.grantPermission = function () { return cordova(this, "grantPermission", { "platforms": ["iOS"] }, arguments); };
    FirebaseXOriginal.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    FirebaseXOriginal.prototype.unregister = function () { return cordova(this, "unregister", {}, arguments); };
    FirebaseXOriginal.prototype.setBadgeNumber = function (badgeNumber) { return cordova(this, "setBadgeNumber", {}, arguments); };
    FirebaseXOriginal.prototype.getBadgeNumber = function () { return cordova(this, "getBadgeNumber", {}, arguments); };
    FirebaseXOriginal.prototype.clearAllNotifications = function () { return cordova(this, "clearAllNotifications", { "platforms": ["Android"] }, arguments); };
    FirebaseXOriginal.prototype.subscribe = function (topic) { return cordova(this, "subscribe", {}, arguments); };
    FirebaseXOriginal.prototype.unsubscribe = function (topic) { return cordova(this, "unsubscribe", {}, arguments); };
    FirebaseXOriginal.prototype.isAutoInitEnabled = function () { return cordova(this, "isAutoInitEnabled", {}, arguments); };
    FirebaseXOriginal.prototype.setAutoInitEnabled = function (enabled) { return cordova(this, "setAutoInitEnabled", {}, arguments); };
    FirebaseXOriginal.prototype.createChannel = function (channelOptions) { return cordova(this, "createChannel", {}, arguments); };
    FirebaseXOriginal.prototype.setDefaultChannel = function (channelOptions) { return cordova(this, "setDefaultChannel", {}, arguments); };
    FirebaseXOriginal.prototype.deleteChannel = function (channelID) { return cordova(this, "deleteChannel", {}, arguments); };
    FirebaseXOriginal.prototype.listChannels = function () { return cordova(this, "listChannels", {}, arguments); };
    FirebaseXOriginal.prototype.setAnalyticsCollectionEnabled = function (enabled) { return cordova(this, "setAnalyticsCollectionEnabled", {}, arguments); };
    FirebaseXOriginal.prototype.setCrashlyticsCollectionEnabled = function (enabled) { return cordova(this, "setCrashlyticsCollectionEnabled", {}, arguments); };
    FirebaseXOriginal.prototype.setPerformanceCollectionEnabled = function (enabled) { return cordova(this, "setPerformanceCollectionEnabled", {}, arguments); };
    FirebaseXOriginal.prototype.logEvent = function (type, data) { return cordova(this, "logEvent", {}, arguments); };
    FirebaseXOriginal.prototype.setScreenName = function (name) { return cordova(this, "setScreenName", {}, arguments); };
    FirebaseXOriginal.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    FirebaseXOriginal.prototype.setUserProperty = function (name, value) { return cordova(this, "setUserProperty", {}, arguments); };
    FirebaseXOriginal.prototype.setCrashlyticsUserId = function (userId) { return cordova(this, "setCrashlyticsUserId", {}, arguments); };
    FirebaseXOriginal.prototype.sendCrash = function () { return cordova(this, "sendCrash", {}, arguments); };
    FirebaseXOriginal.prototype.logMessage = function (message) { return cordova(this, "logMessage", {}, arguments); };
    FirebaseXOriginal.prototype.logError = function (error, stackTrace) { return cordova(this, "logError", {}, arguments); };
    FirebaseXOriginal.prototype.verifyPhoneNumber = function (phoneNumber, timeOutDuration, fakeVerificationCode) { return cordova(this, "verifyPhoneNumber", { "callbackOrder": "reverse" }, arguments); };
    FirebaseXOriginal.prototype.signInWithCredential = function (credential) { return cordova(this, "signInWithCredential", {}, arguments); };
    FirebaseXOriginal.prototype.createUserWithEmailAndPassword = function (email, password) { return cordova(this, "createUserWithEmailAndPassword", {}, arguments); };
    FirebaseXOriginal.prototype.signInUserWithEmailAndPassword = function (email, password) { return cordova(this, "signInUserWithEmailAndPassword", {}, arguments); };
    FirebaseXOriginal.prototype.signInUserWithCustomToken = function (customToken) { return cordova(this, "signInUserWithCustomToken", {}, arguments); };
    FirebaseXOriginal.prototype.signInUserAnonymously = function () { return cordova(this, "signInUserAnonymously", {}, arguments); };
    FirebaseXOriginal.prototype.authenticateUserWithGoogle = function (clientId) { return cordova(this, "authenticateUserWithGoogle", {}, arguments); };
    FirebaseXOriginal.prototype.authenticateUserWithApple = function (locale) { return cordova(this, "authenticateUserWithApple", { "callbackOrder": "reverse" }, arguments); };
    FirebaseXOriginal.prototype.linkUserWithCredential = function (credential, success, error) { return cordova(this, "linkUserWithCredential", {}, arguments); };
    FirebaseXOriginal.prototype.reauthenticateWithCredential = function (credential, success, error) { return cordova(this, "reauthenticateWithCredential", {}, arguments); };
    FirebaseXOriginal.prototype.isUserSignedIn = function () { return cordova(this, "isUserSignedIn", {}, arguments); };
    FirebaseXOriginal.prototype.signOutUser = function () { return cordova(this, "signOutUser", {}, arguments); };
    FirebaseXOriginal.prototype.updateUserProfile = function (profile) { return cordova(this, "updateUserProfile", {}, arguments); };
    FirebaseXOriginal.prototype.updateUserEmail = function (email) { return cordova(this, "updateUserEmail", {}, arguments); };
    FirebaseXOriginal.prototype.sendUserEmailVerification = function () { return cordova(this, "sendUserEmailVerification", {}, arguments); };
    FirebaseXOriginal.prototype.updateUserPassword = function (password) { return cordova(this, "updateUserPassword", {}, arguments); };
    FirebaseXOriginal.prototype.sendUserPasswordResetEmail = function (email) { return cordova(this, "sendUserPasswordResetEmail", {}, arguments); };
    FirebaseXOriginal.prototype.deleteUser = function () { return cordova(this, "deleteUser", {}, arguments); };
    FirebaseXOriginal.prototype.registerAuthStateChangeListener = function (fn) { return cordova(this, "registerAuthStateChangeListener", {}, arguments); };
    FirebaseXOriginal.prototype.fetch = function (cacheExpirationSeconds) { return cordova(this, "fetch", {}, arguments); };
    FirebaseXOriginal.prototype.activateFetched = function () { return cordova(this, "activateFetched", {}, arguments); };
    FirebaseXOriginal.prototype.getValue = function (key) { return cordova(this, "getValue", {}, arguments); };
    FirebaseXOriginal.prototype.getByteArray = function (key) { return cordova(this, "getByteArray", {}, arguments); };
    FirebaseXOriginal.prototype.getInfo = function () { return cordova(this, "getInfo", {}, arguments); };
    FirebaseXOriginal.prototype.setConfigSettings = function (settings) { return cordova(this, "setConfigSettings", {}, arguments); };
    FirebaseXOriginal.prototype.setDefaults = function (settings) { return cordova(this, "setDefaults", {}, arguments); };
    FirebaseXOriginal.prototype.startTrace = function (name) { return cordova(this, "startTrace", {}, arguments); };
    FirebaseXOriginal.prototype.incrementCounter = function (name) { return cordova(this, "incrementCounter", {}, arguments); };
    FirebaseXOriginal.prototype.stopTrace = function (name) { return cordova(this, "stopTrace", {}, arguments); };
    FirebaseXOriginal.prototype.addDocumentToFirestoreCollection = function (document, collection, success, error) { return cordova(this, "addDocumentToFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.prototype.setDocumentInFirestoreCollection = function (documentId, document, collection, success, error) { return cordova(this, "setDocumentInFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.prototype.updateDocumentInFirestoreCollection = function (documentId, document, collection, success, error) { return cordova(this, "updateDocumentInFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.prototype.deleteDocumentFromFirestoreCollection = function (documentId, collection, success, error) { return cordova(this, "deleteDocumentFromFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.prototype.fetchDocumentInFirestoreCollection = function (documentId, collection, success, error) { return cordova(this, "fetchDocumentInFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.prototype.fetchFirestoreCollection = function (collection, success, error) { return cordova(this, "fetchFirestoreCollection", {}, arguments); };
    FirebaseXOriginal.pluginName = "FirebaseX";
    FirebaseXOriginal.plugin = "cordova-plugin-firebasex";
    FirebaseXOriginal.pluginRef = "FirebasePlugin";
    FirebaseXOriginal.repo = "https://github.com/dpa99c/cordova-plugin-firebasex";
    FirebaseXOriginal.platforms = ["Android", "iOS"];
    return FirebaseXOriginal;
}(IonicNativePlugin));
var FirebaseX = new FirebaseXOriginal();
export { FirebaseX };
//# sourceMappingURL=data:application/json;base64,